#Check data types in DF
print(summary(align_stats_bad))
#Barplot of concordant alignment stats
ggplot(align_stats, aes(x=sample, y=concordant, fill=ref)) +
geom_bar(stat="identity", position=position_dodge()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title="Alignment Percentages to D. Pulex References", x="D. melanica Sample", y="Overall Alignment")
?ggsave
#Collect alignment stats
(align_stats <- data.frame(
sample = c(str_remove(align_KAP4$sample, "140327_I481_FCC3P1PACXX_L[234]_"), str_remove(align_PA42_v4.1$sample, "140327_I481_FCC3P1PACXX_L[234]_"), str_remove(align_PA42_v3.0$sample, "140327_I481_FCC3P1PACXX_L[234]_")),
ref = c(rep("KAP4", each=nrow(align_KAP4)), rep("PA42_v4.1", each=nrow(align_PA42_v4.1)), rep("PA42_v3.0", each=nrow(align_PA42_v3.0))),
overall = sapply(c(str_remove(align_KAP4$overall, "%"), str_remove(align_PA42_v4.1$overall, "%"), str_remove(align_PA42_v3.0$overall, "%")), as.numeric),
concordant = sapply(c(str_remove(align_KAP4$concordant, "%"), str_remove(align_PA42_v4.1$concordant, "%"), str_remove(align_PA42_v3.0$concordant, "%")), as.numeric)
))
#Check data types in DF
print(summary(align_stats))
#Barplot of overall alignment stats
align_plot_overall <- ggplot(align_stats, aes(x=sample, y=overall, fill=ref)) +
geom_bar(stat="identity", position=position_dodge()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title="Alignment Percentages to D. Pulex References", x="D. melanica Sample", y="Overall Alignment")
ggsave("/Users/bamflappy/PfrenderLab/dMelUV/AlignmentAnalysis/align_stats_ref_overall.png", align_plot_overall)
#Barplot of concordant alignment stats
align_plot_conc <- ggplot(align_stats, aes(x=sample, y=concordant, fill=ref)) +
geom_bar(stat="identity", position=position_dodge()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title="Alignment Percentages to D. Pulex References", x="D. melanica Sample", y="Overall Alignment")
ggsave("/Users/bamflappy/PfrenderLab/dMelUV/AlignmentAnalysis/align_stats_ref_conc.png", align_plot_conc)
#Barplot of overall alignment stats
align_plot_overall <- ggplot(align_stats, aes(x=sample, y=overall, fill=ref)) +
geom_bar(stat="identity", position=position_dodge()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), plot.title = element_text(hjust = 0.5))+
labs(title="Alignment Percentages to D. Pulex Reference Genomes", x="Daphnia Sample", y="Overall Alignment")
align_plot_overall
ggsave("/Users/bamflappy/PfrenderLab/dMelUV/AlignmentAnalysis/align_stats_ref_overall.png", align_plot_overall)
#Barplot of concordant alignment stats
align_plot_conc <- ggplot(align_stats, aes(x=sample, y=concordant, fill=ref)) +
geom_bar(stat="identity", position=position_dodge()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), plot.title = element_text(hjust = 0.5))+
labs(title="Alignment Percentages to D. Pulex Reference Genomes", x="Daphnia Sample", y="Overall Alignment")
ggsave("/Users/bamflappy/PfrenderLab/dMelUV/AlignmentAnalysis/align_stats_ref_conc.png", align_plot_conc)
#Barplot of concordant alignment stats
align_plot_conc <- ggplot(align_stats, aes(x=sample, y=concordant, fill=ref)) +
geom_bar(stat="identity", position=position_dodge()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), plot.title = element_text(hjust = 0.5))+
labs(title="Alignment Percentages to D. Pulex Reference Genomes", x="Daphnia Sample", y="Concordant Alignment")
ggsave("/Users/bamflappy/PfrenderLab/dMelUV/AlignmentAnalysis/align_stats_ref_conc.png", align_plot_conc)
#Barplot of concordant alignment stats
align_plot_conc <- ggplot(align_stats, aes(x=sample, y=concordant, fill=ref)) +
geom_bar(stat="identity", position=position_dodge()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), plot.title = element_text(hjust = 0.5))+
labs(title="Alignment Percentages to D. Pulex Reference Genomes", x="Daphnia Sample", y="Uniquely Mapped")
ggsave("/Users/bamflappy/PfrenderLab/dMelUV/AlignmentAnalysis/align_stats_ref_conc.png", align_plot_conc)
# assign a variable a value of 1
# assign a variable a value of 1
my_value <- 1
print(my_value)
# assign a variable a value of 1
my_value_1 <- 5
my_value_2 <- 10
my_result <- my_value_1 + my_value_2
(my_result <- my_value_1 + my_value_2)
(disp <- "code")
(disp <- "code it out")
print("cool cool cool")
cat("cool cool cool")
print(my_vec)
my_vec
# assign a variable a value of 1
my_vec <- 5:10
print(my_vec)
my_vec
my_vec[2]
# assign a variable a value of 1
my_vec <- 5:10
print(my_vec)
my_vec
my_vec[2]
(my_list <- c("first", "second"))
(my_list <- list(cat = "first", dog = "second"))
my_list
my_list[2]
my_list <- list(cat = "first", dog = "second", frog = "ribbit"); my_list[2]
print(my_list[1])
cat(my_list[1])
(my_list <- list(cat = "first", dog = "second", frog = "ribbit"); my_list[2])
(my_list <- list(cat = "first", dog = "second", frog = "ribbit"))
val <- 1
cat(val)
(val <- 1)
cat(val)
val print(val)
print(val)
val
print(unlist(my_list))
cat(unlist(my_list))
cat(my_list)
unlist(my_list)
cat(my_list)
cat(my_list)
cat(my_list[1])
cat(my_list[cat])
cat(my_list[cat])
print(my_list[cat])
print(my_list$cat)
cat(my_list$cat)
cat(my_list[1])
for (x in letters[1:4]) {
cat(x)
}
?cat
for (x in letters[1:4]) {
cat(x, sep = "\n")
}
x <- "c"
if (x == "c") {
cat("test")
}
cat(my_vec <- 5:8)
?print
??print
ind_list <- list("five", "six", "seven", "eight")
ind_list
cat(unlist(ind_list <- list("five", "six", "seven", "eight")))
cat(ind_list[4])
ind_list <- list("five", "six", "seven", "eight")
cat(ind_list[4])
cat(ind_list[1])
cat(unlist(ind_list[4]))
cat(unlist(ind_list[1]))
?c
ind_list <- c("five", "six", "seven", "eight")
cat(ind_list[4])
cat(ind_list <- c("five", "six", "seven", "eight"))
cat(my_list[1])
(my_list <- list(cat = "first", dog = "second", frog = "ribbit"))
cat(my_list[1])
cat(unlist(my_list[1]))
?sqlFetch
install.packages("RODBC")
?sqlFetch
??sqlFetch
#install.packages("RODBC")
library(RODBC)
?sqlFetch
con <- odbcConnectAccess("/Users/bamflappy/Documents/rPlayground/WildfinderUpdate.mdb")
?odbcConnectAccess
??odbcConnectAccess
?RODBC
RShowDoc("RODBC", package="RODBC")
con_handle <- odbcConnect("/Users/bamflappy/Documents/rPlayground/WildfinderUpdate.mdb")
warnings()
#setup a connection or channel from the client
con_handle <- odbcConnect("https://www.worldwildlife.org/publications/wildfinder-database")
#setup a connection or channel from the client
con_handle <- RODBC::odbcConnectAccess("/Users/bamflappy/Documents/rPlayground/WildfinderUpdate.mdb")
install.packages("mdbtools")
#install.packages("mdbtools")
library(mdbtools)
??mdbtools
#setup a connection or channel from the client
con_handle <- access_import("/Users/bamflappy/Documents/rPlayground/WildfinderUpdate.mdb")
??access_import
ImportExport::access_import
??ImportExport::access_import
install.packages("ImportExport")
library(ImportExport)
#setup a connection or channel from the client
con_handle <- access_import("/Users/bamflappy/Documents/rPlayground/WildfinderUpdate.mdb")
warnings()
#specify MS access driver info
driver_info <- "Driver={Microsoft Access Driver (*.mdb)};"
#specify MS access driver info
driver_info <- "Driver={Microsoft Access Driver (*.mdb)};"
#set db path
db_path <- "/Users/bamflappy/Documents/rPlayground/WildfinderUpdate.mdb"
#combine driver and db path info
path <- paste0(driver_info, "DQB=", db_path)
#setup a connection or channel from the client
con_handle <- odbcDriverConnect(path)
warnings()
install.packages("Hmisc")
install.packages("Hmisc")
#install.packages("Hmisc")
library(Hmisc)
#setup a connection or channel from the client
(con_handle <- mdb.get(db_path, tables=TRUE))
#set db path
db_path <- paste0(here(), "/Users/bamflappy/Documents/rPlayground/WildfinderUpdate.mdb")
??here
#set db path
db_path <- "/Users/bamflappy/Documents/rPlayground/WildfinderUpdate.mdb"
#setup a connection or channel from the client
(con_handle <- mdb.get(db_path, tables=TRUE))
#setup a connection or channel from the client
con_handle <- mdb.get(db_path, tables=TRUE)
#install.packages("Hmisc")
install.packages("mdb-tools")
#setup a connection or channel from the client
con_handle <- mdb.get(db_path, tables=TRUE)
librar(mdb-tools)
library(mdb-tools)
#install.packages("Hmisc")
install.packages("mdb-tools")
library(mdb-tools)
#import data from the clipboard
(clip_table <- ad.delim("clipboard"))
#import data from the clipboard
(clip_table <- read.delim("clipboard"))
#import data from the clipboard
clip_table <- read.table("clipboard", header=TRUE)
#import data from the clipboard
clip_table <- read.table("clipboard")
#import data from the clipboard
clip_table <- read.table(pipe("pbpaste"))
#import data from the clipboard
clip_table <- read.table(pipe("pbpaste"), header=TRUE)
#import data from the clipboard
clip_table <- read.table(pipe("pbpaste"), header=TRUE)
#import data from the clipboard
clip_table <- read.table(pipe("pbpaste"))
#import data from the clipboard
clip_table <- read.table(pipe("pbpaste"))
install.packages("WWWusage")
pirates <- read.csv("/Users/bamflappy/Documents/rPlayground/PiratesPirate.csv")
pirates
colnames(pirates)
# load libraries
library(ggplot2)
# plot the Limbs vs ShipID
ggplot(pirates, aes(x = Limbs, y = ShipID)) +
geom_point()
# plot the Teeth vs ShipID
ggplot(pirates, aes(x = Teeth, y = ShipID)) +
geom_point()
# plot the Teeth vs ShipID
pirate_plot <- ggplot(pirates, aes(x = Teeth, y = ShipID)) +
geom_point()
# color the plot of Teeth vs ShipID by Origin
ggplot(pirates, aes(x = Teeth, y = ShipID, color = Origin)) +
geom_point()
# plot the PositionID vs ShipID
ggplot(pirates, aes(x = PositionID, y = ShipID)) +
geom_point()
# color the plot of PositionID vs ShipID by Origin
ggplot(pirates, aes(x = PositionID, y = ShipID, color = Origin)) +
geom_point()
# view the column names of the pirate data
colnames(pirates)
# view the first few lines of data
head(pirates)
# plot the Limbs vs ShipID
ggplot(pirates, aes(x = Limbs, y = ShipID)) +
geom_point()
# color the plot of Limbs vs ShipID by Origin
ggplot(pirates, aes(x = Limbs, y = ShipID, color = Origin)) +
geom_point()
# color the plot of Limbs vs ShipID by Origin
ggplot(pirates, aes(x = Limbs, y = ShipID, color = Origin)) +
geom_count()
# cretae a scatter plot the Origin vs Limbs
ggplot(data = pirates, aes(x = Origin, y = Limbs)) +
geom_point()
# change to a boxplot of Origin vs Limbs
ggplot(data = pirates, aes(x = Origin, y = Limbs)) +
geom_boxplot()
# cretae a scatter plot the Teeth vs Limbs
ggplot(data = pirates, aes(x = Teeth, y = Limbs)) +
geom_point()
source("~/.active-rstudio-document", echo=TRUE)
# cretae a scatter plot the Limbs vs Teeth
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_point()
# modify the scatter plot to include the count at each point
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_count()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = Origin)) +
geom_count()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = ShipID)) +
geom_count()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = ShipID)) +
geom_point()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = ShipID)) +
geom_count()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = Origin)) +
geom_count()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_count() +
facet_wrap(~ Origin)
# change to a boxplot to better describe the data at each point
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_boxplot()
# modify the scatter plot to include the count at each point
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_count()
?grepl
grepl("0.5" pirates$Limbs)
grepl("0.5", pirates$Limbs)
pirates[with(pirates, grepl("0.5", pirates$Limbs)), ]
# modify the scatter plot to include the count at each point
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_count()
# check the pirates with half limbs
pirates[pirates$Limbs == "2.5", ]
# remove the row of data for the pirate with 2.5 Limbs
pirates <- pirates(-c(753), )
# remove the row of data for the pirate with 2.5 Limbs
pirates <- pirates[-c(753), ]
# re-plot to verify the change in the data
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_count()
# change to a boxplot to better describe the data at each point
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_boxplot()
# change to a boxplot to better describe the data at each point
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot()
# import the pirate data
pirates <- read.csv("/Users/bamflappy/Documents/rPlayground/PiratesPirate.csv")
# change to a boxplot to better describe the data at each point
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot()
# check the data for the outlier pirate with 2.5 Limbs
pirates[pirates$Limbs == "2.5", ]
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_boxplot() +
facet_wrap(~ Origin)
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot() +
facet_wrap(~ Origin)
?factor''
?factor
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot() +
facet_wrap(~ Origin)
# color the points by Origin to look for patterns
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = Origin)) +
geom_count()
# color the points by Origin to look for patterns
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, color = Origin)) +
geom_boxplot()
# use the facotr function to make the different numbers of Limbs into categories
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot()
# look up color options on the internet by searching "ggplot boxplot color"
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
# color the points by Origin to look for patterns
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, color = Origin)) +
geom_boxplot()
# create a separate boxplot for each Origin of pirates
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="red", fill="orange", alpha=0.2) +
facet_wrap(~ Origin)
# example 2 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
# example 2 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, fill = class)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
# example 2 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, fill = Origin)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
# color the points by Origin to look for patterns
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, color = Origin)) +
geom_boxplot()
# example 2 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, fill = Origin)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
# example 3 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, fill = Origin)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
scale_fill_brewer(palette="BuPu")
# create a separate boxplot for each Origin of pirates
# look up facet options on the internet by searching "ggplot boxplot facet"
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="blue", fill="green", alpha=0.2) +
facet_wrap(~ Origin)
# create a separate boxplot for each Origin of pirates
# look up facet options on the internet by searching "ggplot boxplot facet"
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="purple", fill="green", alpha=0.2) +
facet_wrap(~ Origin)
# create a separate boxplot for each Origin of pirates
# look up facet options on the internet by searching "ggplot boxplot facet"
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="blue", fill="purple", alpha=0.2) +
facet_wrap(~ Origin)
# create a separate boxplot for each Origin of pirates
# look up facet options on the internet by searching "ggplot boxplot facet"
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="blue", fill="green", alpha=0.2) +
facet_wrap(~ Origin)
# view the first few lines of data
head(pirates)
# change the appearance of the individual plot titles
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="blue", fill="green", alpha=0.2) +
facet_wrap(ShipID ~ Origin)
ships <- read.csv("/Users/bamflappy/Repos/rPlayground/data/PiratesShip.csv")
summary(ships)
mean(ships$CrewCapacity)
sum(ships$CrewCapacity)
swetwd
setwd
?setwd
#Load the edgeR library
library("edgeR")
?heatmap
# set the working directory
#setwd("/YOUR/FILE/PATH/")
setwd("/Users/bamflappy/Repos/rPlayground/data/")
# import gene count data
tribolium_counts <- read.csv("TriboliumCounts.csv", row.names="X")
# import grouping factor
targets <- read.csv(file="groupingFactors.csv")
# import libraries
library(edgeR)
library(LaCroixColoR)
# view available palettes
names(lacroix_palettes)
lacroix_palette("PassionFruit", type = "discrete")
Sys.setenv("DISPLAY"=":0.0")
lacroix_palette("PassionFruit", type = "discrete")
# install libraries, if necessary
#BiocManager::install("edgeR")
#install.packages("devtools")
devtools::install_github("jrnold/ggthemes")
install.packages("ggthemes")
library(ggthemes)
??ggthemes
code_theme_list()
# view available palettes
names(ggthemes)
# view available palettes
names(ggthemes_palettes)
# view available palettes
names(ggthemes_data)
?ggthemes_data
# install libraries, if necessary
#BiocManager::install("edgeR")
install.packages('ghibli')
library(ghibli)
# view available palettes
names(ghibli_palettes)
# view available palettes
par(mfrow=c(9,3))
for(i in names(ghibli_palettes)) print(ghibli_palette(i))
# retrieve the vector of colors associated with Zissou1
#Error in check_for_XQuartz() :
#  X11 library is missing: install XQuartz from www.xquartz.org
#brew install --cask xquartz
(ghibli_colors <- ghibli_palette("PonyoMedium", type = "discrete"))
ghibli_subset <- c(ghibli_colors[3], ghibli_colors[6], ghibli_colors[4])
ghibli_subset
#Setup a design matrix
group <- factor(paste(targets$treatment,targets$hours,sep="."))
#Create DGE list object
list <- DGEList(counts=tribolium_counts,group=group)
colnames(list) <- rownames(targets)
head(list)
#Plot the library sizes before normalization
jpeg("glm_librarySizes_beforeNorm.jpg")
barplot(list$samples$lib.size*1e-6, names=1:12, ylab="Library size (millions)")
dev.off()
# set the working directory
#setwd("/YOUR/FILE/PATH/")
setwd("/Users/bamflappy/Repos/rPlayground/plots/dev/")
#Plot the library sizes before normalization
jpeg("glm_librarySizes_beforeNorm.jpg")
barplot(list$samples$lib.size*1e-6, names=1:12, ylab="Library size (millions)")
dev.off()
#Plot the library sizes before normalization
jpeg("glm_librarySizes.jpg")
barplot(list$samples$lib.size*1e-6, names=1:12, ylab="Library size (millions)")
dev.off()
#Retain genes only if it is expressed at a minimum level
keep <- filterByExpr(list)
summary(keep)
list <- list[keep, , keep.lib.sizes=FALSE]
#Use TMM normalization to eliminate composition biases
# between libraries
list <- calcNormFactors(list)
#Retrieve normalized counts
normList <- cpm(list, normalized.lib.sizes=TRUE)
#Write the normalized counts to a file
write.table(normList, file="tribolium_normalizedCounts.csv", sep=",", row.names=TRUE)
#View normalization factors
list$samples
dim(list)
plotMD(cpm(list, log=TRUE), column=1)
abline(h=0, col="red", lty=2, lwd=2)
