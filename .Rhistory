#Check data types in DF
print(summary(align_stats))
#Barplot of overall alignment stats
align_plot_overall <- ggplot(align_stats, aes(x=sample, y=overall, fill=ref)) +
geom_bar(stat="identity", position=position_dodge()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title="Alignment Percentages to D. Pulex References", x="D. melanica Sample", y="Overall Alignment")
ggsave("/Users/bamflappy/PfrenderLab/dMelUV/AlignmentAnalysis/align_stats_ref_overall.png", align_plot_overall)
#Barplot of concordant alignment stats
align_plot_conc <- ggplot(align_stats, aes(x=sample, y=concordant, fill=ref)) +
geom_bar(stat="identity", position=position_dodge()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1))+
labs(title="Alignment Percentages to D. Pulex References", x="D. melanica Sample", y="Overall Alignment")
ggsave("/Users/bamflappy/PfrenderLab/dMelUV/AlignmentAnalysis/align_stats_ref_conc.png", align_plot_conc)
#Barplot of overall alignment stats
align_plot_overall <- ggplot(align_stats, aes(x=sample, y=overall, fill=ref)) +
geom_bar(stat="identity", position=position_dodge()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), plot.title = element_text(hjust = 0.5))+
labs(title="Alignment Percentages to D. Pulex Reference Genomes", x="Daphnia Sample", y="Overall Alignment")
align_plot_overall
ggsave("/Users/bamflappy/PfrenderLab/dMelUV/AlignmentAnalysis/align_stats_ref_overall.png", align_plot_overall)
#Barplot of concordant alignment stats
align_plot_conc <- ggplot(align_stats, aes(x=sample, y=concordant, fill=ref)) +
geom_bar(stat="identity", position=position_dodge()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), plot.title = element_text(hjust = 0.5))+
labs(title="Alignment Percentages to D. Pulex Reference Genomes", x="Daphnia Sample", y="Overall Alignment")
ggsave("/Users/bamflappy/PfrenderLab/dMelUV/AlignmentAnalysis/align_stats_ref_conc.png", align_plot_conc)
#Barplot of concordant alignment stats
align_plot_conc <- ggplot(align_stats, aes(x=sample, y=concordant, fill=ref)) +
geom_bar(stat="identity", position=position_dodge()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), plot.title = element_text(hjust = 0.5))+
labs(title="Alignment Percentages to D. Pulex Reference Genomes", x="Daphnia Sample", y="Concordant Alignment")
ggsave("/Users/bamflappy/PfrenderLab/dMelUV/AlignmentAnalysis/align_stats_ref_conc.png", align_plot_conc)
#Barplot of concordant alignment stats
align_plot_conc <- ggplot(align_stats, aes(x=sample, y=concordant, fill=ref)) +
geom_bar(stat="identity", position=position_dodge()) +
theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1), plot.title = element_text(hjust = 0.5))+
labs(title="Alignment Percentages to D. Pulex Reference Genomes", x="Daphnia Sample", y="Uniquely Mapped")
ggsave("/Users/bamflappy/PfrenderLab/dMelUV/AlignmentAnalysis/align_stats_ref_conc.png", align_plot_conc)
# assign a variable a value of 1
# assign a variable a value of 1
my_value <- 1
print(my_value)
# assign a variable a value of 1
my_value_1 <- 5
my_value_2 <- 10
my_result <- my_value_1 + my_value_2
(my_result <- my_value_1 + my_value_2)
(disp <- "code")
(disp <- "code it out")
print("cool cool cool")
cat("cool cool cool")
print(my_vec)
my_vec
# assign a variable a value of 1
my_vec <- 5:10
print(my_vec)
my_vec
my_vec[2]
# assign a variable a value of 1
my_vec <- 5:10
print(my_vec)
my_vec
my_vec[2]
(my_list <- c("first", "second"))
(my_list <- list(cat = "first", dog = "second"))
my_list
my_list[2]
my_list <- list(cat = "first", dog = "second", frog = "ribbit"); my_list[2]
print(my_list[1])
cat(my_list[1])
(my_list <- list(cat = "first", dog = "second", frog = "ribbit"); my_list[2])
(my_list <- list(cat = "first", dog = "second", frog = "ribbit"))
val <- 1
cat(val)
(val <- 1)
cat(val)
val print(val)
print(val)
val
print(unlist(my_list))
cat(unlist(my_list))
cat(my_list)
unlist(my_list)
cat(my_list)
cat(my_list)
cat(my_list[1])
cat(my_list[cat])
cat(my_list[cat])
print(my_list[cat])
print(my_list$cat)
cat(my_list$cat)
cat(my_list[1])
for (x in letters[1:4]) {
cat(x)
}
?cat
for (x in letters[1:4]) {
cat(x, sep = "\n")
}
x <- "c"
if (x == "c") {
cat("test")
}
cat(my_vec <- 5:8)
?print
??print
ind_list <- list("five", "six", "seven", "eight")
ind_list
cat(unlist(ind_list <- list("five", "six", "seven", "eight")))
cat(ind_list[4])
ind_list <- list("five", "six", "seven", "eight")
cat(ind_list[4])
cat(ind_list[1])
cat(unlist(ind_list[4]))
cat(unlist(ind_list[1]))
?c
ind_list <- c("five", "six", "seven", "eight")
cat(ind_list[4])
cat(ind_list <- c("five", "six", "seven", "eight"))
cat(my_list[1])
(my_list <- list(cat = "first", dog = "second", frog = "ribbit"))
cat(my_list[1])
cat(unlist(my_list[1]))
?sqlFetch
install.packages("RODBC")
?sqlFetch
??sqlFetch
#install.packages("RODBC")
library(RODBC)
?sqlFetch
con <- odbcConnectAccess("/Users/bamflappy/Documents/rPlayground/WildfinderUpdate.mdb")
?odbcConnectAccess
??odbcConnectAccess
?RODBC
RShowDoc("RODBC", package="RODBC")
con_handle <- odbcConnect("/Users/bamflappy/Documents/rPlayground/WildfinderUpdate.mdb")
warnings()
#setup a connection or channel from the client
con_handle <- odbcConnect("https://www.worldwildlife.org/publications/wildfinder-database")
#setup a connection or channel from the client
con_handle <- RODBC::odbcConnectAccess("/Users/bamflappy/Documents/rPlayground/WildfinderUpdate.mdb")
install.packages("mdbtools")
#install.packages("mdbtools")
library(mdbtools)
??mdbtools
#setup a connection or channel from the client
con_handle <- access_import("/Users/bamflappy/Documents/rPlayground/WildfinderUpdate.mdb")
??access_import
ImportExport::access_import
??ImportExport::access_import
install.packages("ImportExport")
library(ImportExport)
#setup a connection or channel from the client
con_handle <- access_import("/Users/bamflappy/Documents/rPlayground/WildfinderUpdate.mdb")
warnings()
#specify MS access driver info
driver_info <- "Driver={Microsoft Access Driver (*.mdb)};"
#specify MS access driver info
driver_info <- "Driver={Microsoft Access Driver (*.mdb)};"
#set db path
db_path <- "/Users/bamflappy/Documents/rPlayground/WildfinderUpdate.mdb"
#combine driver and db path info
path <- paste0(driver_info, "DQB=", db_path)
#setup a connection or channel from the client
con_handle <- odbcDriverConnect(path)
warnings()
install.packages("Hmisc")
install.packages("Hmisc")
#install.packages("Hmisc")
library(Hmisc)
#setup a connection or channel from the client
(con_handle <- mdb.get(db_path, tables=TRUE))
#set db path
db_path <- paste0(here(), "/Users/bamflappy/Documents/rPlayground/WildfinderUpdate.mdb")
??here
#set db path
db_path <- "/Users/bamflappy/Documents/rPlayground/WildfinderUpdate.mdb"
#setup a connection or channel from the client
(con_handle <- mdb.get(db_path, tables=TRUE))
#setup a connection or channel from the client
con_handle <- mdb.get(db_path, tables=TRUE)
#install.packages("Hmisc")
install.packages("mdb-tools")
#setup a connection or channel from the client
con_handle <- mdb.get(db_path, tables=TRUE)
librar(mdb-tools)
library(mdb-tools)
#install.packages("Hmisc")
install.packages("mdb-tools")
library(mdb-tools)
#import data from the clipboard
(clip_table <- ad.delim("clipboard"))
#import data from the clipboard
(clip_table <- read.delim("clipboard"))
#import data from the clipboard
clip_table <- read.table("clipboard", header=TRUE)
#import data from the clipboard
clip_table <- read.table("clipboard")
#import data from the clipboard
clip_table <- read.table(pipe("pbpaste"))
#import data from the clipboard
clip_table <- read.table(pipe("pbpaste"), header=TRUE)
#import data from the clipboard
clip_table <- read.table(pipe("pbpaste"), header=TRUE)
#import data from the clipboard
clip_table <- read.table(pipe("pbpaste"))
#import data from the clipboard
clip_table <- read.table(pipe("pbpaste"))
install.packages("WWWusage")
pirates <- read.csv("/Users/bamflappy/Documents/rPlayground/PiratesPirate.csv")
pirates
colnames(pirates)
# load libraries
library(ggplot2)
# plot the Limbs vs ShipID
ggplot(pirates, aes(x = Limbs, y = ShipID)) +
geom_point()
# plot the Teeth vs ShipID
ggplot(pirates, aes(x = Teeth, y = ShipID)) +
geom_point()
# plot the Teeth vs ShipID
pirate_plot <- ggplot(pirates, aes(x = Teeth, y = ShipID)) +
geom_point()
# color the plot of Teeth vs ShipID by Origin
ggplot(pirates, aes(x = Teeth, y = ShipID, color = Origin)) +
geom_point()
# plot the PositionID vs ShipID
ggplot(pirates, aes(x = PositionID, y = ShipID)) +
geom_point()
# color the plot of PositionID vs ShipID by Origin
ggplot(pirates, aes(x = PositionID, y = ShipID, color = Origin)) +
geom_point()
# view the column names of the pirate data
colnames(pirates)
# view the first few lines of data
head(pirates)
# plot the Limbs vs ShipID
ggplot(pirates, aes(x = Limbs, y = ShipID)) +
geom_point()
# color the plot of Limbs vs ShipID by Origin
ggplot(pirates, aes(x = Limbs, y = ShipID, color = Origin)) +
geom_point()
# color the plot of Limbs vs ShipID by Origin
ggplot(pirates, aes(x = Limbs, y = ShipID, color = Origin)) +
geom_count()
# cretae a scatter plot the Origin vs Limbs
ggplot(data = pirates, aes(x = Origin, y = Limbs)) +
geom_point()
# change to a boxplot of Origin vs Limbs
ggplot(data = pirates, aes(x = Origin, y = Limbs)) +
geom_boxplot()
# cretae a scatter plot the Teeth vs Limbs
ggplot(data = pirates, aes(x = Teeth, y = Limbs)) +
geom_point()
source("~/.active-rstudio-document", echo=TRUE)
# cretae a scatter plot the Limbs vs Teeth
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_point()
# modify the scatter plot to include the count at each point
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_count()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = Origin)) +
geom_count()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = ShipID)) +
geom_count()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = ShipID)) +
geom_point()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = ShipID)) +
geom_count()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = Origin)) +
geom_count()
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_count() +
facet_wrap(~ Origin)
# change to a boxplot to better describe the data at each point
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_boxplot()
# modify the scatter plot to include the count at each point
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_count()
?grepl
grepl("0.5" pirates$Limbs)
grepl("0.5", pirates$Limbs)
pirates[with(pirates, grepl("0.5", pirates$Limbs)), ]
# modify the scatter plot to include the count at each point
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_count()
# check the pirates with half limbs
pirates[pirates$Limbs == "2.5", ]
# remove the row of data for the pirate with 2.5 Limbs
pirates <- pirates(-c(753), )
# remove the row of data for the pirate with 2.5 Limbs
pirates <- pirates[-c(753), ]
# re-plot to verify the change in the data
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_count()
# change to a boxplot to better describe the data at each point
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_boxplot()
# change to a boxplot to better describe the data at each point
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot()
# import the pirate data
pirates <- read.csv("/Users/bamflappy/Documents/rPlayground/PiratesPirate.csv")
# change to a boxplot to better describe the data at each point
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot()
# check the data for the outlier pirate with 2.5 Limbs
pirates[pirates$Limbs == "2.5", ]
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_boxplot() +
facet_wrap(~ Origin)
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot() +
facet_wrap(~ Origin)
?factor''
?factor
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot() +
facet_wrap(~ Origin)
# color the points by Origin to look for patterns
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = Origin)) +
geom_count()
# color the points by Origin to look for patterns
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, color = Origin)) +
geom_boxplot()
# use the facotr function to make the different numbers of Limbs into categories
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot()
# look up color options on the internet by searching "ggplot boxplot color"
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
# color the points by Origin to look for patterns
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, color = Origin)) +
geom_boxplot()
# create a separate boxplot for each Origin of pirates
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="red", fill="orange", alpha=0.2) +
facet_wrap(~ Origin)
# example 2 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
# example 2 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, fill = class)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
# example 2 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, fill = Origin)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
# color the points by Origin to look for patterns
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, color = Origin)) +
geom_boxplot()
# example 2 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, fill = Origin)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
# example 3 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, fill = Origin)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
scale_fill_brewer(palette="BuPu")
# create a separate boxplot for each Origin of pirates
# look up facet options on the internet by searching "ggplot boxplot facet"
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="blue", fill="green", alpha=0.2) +
facet_wrap(~ Origin)
# create a separate boxplot for each Origin of pirates
# look up facet options on the internet by searching "ggplot boxplot facet"
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="purple", fill="green", alpha=0.2) +
facet_wrap(~ Origin)
# create a separate boxplot for each Origin of pirates
# look up facet options on the internet by searching "ggplot boxplot facet"
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="blue", fill="purple", alpha=0.2) +
facet_wrap(~ Origin)
# create a separate boxplot for each Origin of pirates
# look up facet options on the internet by searching "ggplot boxplot facet"
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="blue", fill="green", alpha=0.2) +
facet_wrap(~ Origin)
# view the first few lines of data
head(pirates)
# change the appearance of the individual plot titles
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="blue", fill="green", alpha=0.2) +
facet_wrap(ShipID ~ Origin)
#### Colorful R Plots with Wes Anderson Palettes & ggplot2 - Pirate Ship Features
# data.world/funsizemaddy/pirate2/workspace/file?filename=Pirates+%281%29.xlsx
# set the working directory
setwd("/Users/bamflappy/Repos/rPlayground")
# import the pirate ship data from the PiratesShip.csv file
ships <- read.csv("data/PiratesShip.csv")
# view the column names of the ship data
colnames(ships)
# view the first few lines of ship data
head(ships)
# view the ship data set in a new tab
View(ships)
### One Dimension of Data with Vectors - CrewCapacity or Sails
# create a plot for each dimension of CrewCapacity or Sails
# if not already, install the ggplot2 package
#install.packages("ggplot2")
# load the ggplot2 library
library(ggplot2)
# check out the basic ggplot function and geoms
# https://ggplot2.tidyverse.org/reference/
# https://datacarpentry.org/r-socialsci/04-ggplot2/index.html
# look at the CrewCapacity vector (dimension) of the ships data
ships$CrewCapacity
# plot only the CrewCapacity dimension of the ship data
ggplot(data = ships, aes(x = CrewCapacity)) +
geom_bar()
ggsave("plots/dev/ship_plot_crew_bar.png", plot = last_plot())
# look at the Sails vector (dimension) of the ships data
ships$Sails
# plot only the Sails dimension of the ship data
ggplot(data = ships, aes(x = Sails)) +
geom_bar()
ggsave("plots/dev/ship_plot_sails_bar.png", plot = last_plot())
### Two Dimensions of Data with Dataframes - CrewCapacity & Sails
# explore the relationship between Sails and CrewCapacity
# combine the two dimensions into one plot with geom_point
# create a scatter plot of CrewCapacity by Sails
ggplot(data = ships, aes(x = Sails, y = CrewCapacity)) +
geom_point()
ggsave("plots/dev/ship_plot_crew_sails.png", plot = last_plot())
### Three Dimensions of Data with Colors - CrewCapacity & Sails & MaidenYear
# explore the relationship between Sails and CrewCapacity by MaidenYear
# add a third dimension to your plot with color
# color the scatter plot by MaidenYear
ggplot(data = ships, aes(x = Sails, y = CrewCapacity, color = MaidenYear)) +
geom_point()
ggsave("plots/dev/ship_plot_crew_sails_year.png", plot = last_plot())
### Fun Colors - Wes Anderson Palette
# create a fun colorful plot by searching the internet for "ggplot wes anderson"
# https://github.com/karthik/wesanderson
# https://rforpoliticalscience.com/2020/07/26/make-wes-anderson-themed-graphs-with-wesanderson-package-in-r/
# if not already, install the wesanderson package
#install.packages("wesanderson")
# load the wesanderson package
library(wesanderson)
# checkout the color palette options
names(wes_palettes)
# look at the info for the wes_palette function
?wes_palette
# look at the info for the scale_color_gradientn function
?scale_color_gradientn
# color the scatter plot using wes_palettes and scale_color_gradientn
ggplot(data = ships, aes(x = Sails, y = CrewCapacity, color = MaidenYear)) +
geom_point() +
scale_color_gradientn(colors = wes_palette("Zissou1", type = "continuous"))
### Bonus Exercises - Adjusting Plot Appearance
# add axis and plot titles
ggplot(data = ships, aes(x = Sails, y = CrewCapacity, color = MaidenYear)) +
geom_point() +
scale_color_gradientn(colors = wes_palette("Zissou1", type = "continuous")) +
labs(title = "Pirate Ship Crew Capacity by Sails and Maiden Year",
x ="Number of Sails",
y = "Crew Capacity")
ggsave("plots/dev/ship_plot_crew_sails_year_title.png", plot = last_plot())
# retrieve the vector of colors associated with Zissou1
(zis_colors <- wes_palette("Zissou1", type = "discrete"))
# adjust the axis and plot title colors
ggplot(data = ships, aes(x = Sails, y = CrewCapacity, color = MaidenYear)) +
geom_point() +
scale_color_gradientn(colors = wes_palette("Zissou1", type = "continuous")) +
labs(title = "Pirate Ship Crew Capacity by Sails and Maiden Year",
x ="Number of Sails",
y = "Crew Capacity") +
theme(
plot.title = element_text(color = zis_colors[1], size = 14, face = "bold.italic"),
axis.title.x = element_text(color = zis_colors[4], size = 14, face = "bold"),
axis.title.y = element_text(color = zis_colors[5], size = 14, face = "bold")
)
ggsave("plots/dev/ship_plot_crew_sails_year_colorTitle.png", plot = last_plot())
# center the plot title
ggplot(data = ships, aes(x = Sails, y = CrewCapacity, color = MaidenYear)) +
geom_point() +
scale_color_gradientn(colors = wes_palette("Zissou1", type = "continuous")) +
labs(title = "Pirate Ship Crew Capacity by Sails and Maiden Year",
x ="Number of Sails",
y = "Crew Capacity") +
theme(
plot.title = element_text(color = zis_colors[1], size = 14, face = "bold.italic", hjust = 0.5),
axis.title.x = element_text(color = zis_colors[4], size = 14, face = "bold"),
axis.title.y = element_text(color = zis_colors[5], size = 14, face = "bold")
)
### Saving Plots - ggsave
# check out the info for the ggsave function
?ggsave
# check out the info for the last_plot function
?last_plot
# save the last plot using the ggsave function
ggsave("plots/bonus/ship_plot_crew_sails_year_centerTitle.png", plot = last_plot())
