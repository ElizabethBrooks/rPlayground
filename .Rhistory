# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = Limbs, y = Teeth)) +
geom_boxplot() +
facet_wrap(~ Origin)
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot() +
facet_wrap(~ Origin)
?factor''
?factor
# color the points of the count scatter plot by Origin
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot() +
facet_wrap(~ Origin)
# color the points by Origin to look for patterns
ggplot(data = pirates, aes(x = Limbs, y = Teeth, color = Origin)) +
geom_count()
# color the points by Origin to look for patterns
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, color = Origin)) +
geom_boxplot()
# use the facotr function to make the different numbers of Limbs into categories
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot()
# look up color options on the internet by searching "ggplot boxplot color"
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="red", fill="orange", alpha=0.2)
# color the points by Origin to look for patterns
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, color = Origin)) +
geom_boxplot()
# create a separate boxplot for each Origin of pirates
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="red", fill="orange", alpha=0.2) +
facet_wrap(~ Origin)
# example 2 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
# example 2 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, fill = class)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
# example 2 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, fill = Origin)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
# color the points by Origin to look for patterns
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, color = Origin)) +
geom_boxplot()
# example 2 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, fill = Origin)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none")
# example 3 from r-graph-gallery.com/264-control-ggplot2-boxplot-colors.html
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth, fill = Origin)) +
geom_boxplot(alpha=0.3) +
theme(legend.position="none") +
scale_fill_brewer(palette="BuPu")
# create a separate boxplot for each Origin of pirates
# look up facet options on the internet by searching "ggplot boxplot facet"
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="blue", fill="green", alpha=0.2) +
facet_wrap(~ Origin)
# create a separate boxplot for each Origin of pirates
# look up facet options on the internet by searching "ggplot boxplot facet"
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="purple", fill="green", alpha=0.2) +
facet_wrap(~ Origin)
# create a separate boxplot for each Origin of pirates
# look up facet options on the internet by searching "ggplot boxplot facet"
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="blue", fill="purple", alpha=0.2) +
facet_wrap(~ Origin)
# create a separate boxplot for each Origin of pirates
# look up facet options on the internet by searching "ggplot boxplot facet"
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="blue", fill="green", alpha=0.2) +
facet_wrap(~ Origin)
# view the first few lines of data
head(pirates)
# change the appearance of the individual plot titles
# www.sthda.com/english/wiki/ggplot2-facet-split-a-plot-into-a-matrix-of-panels
ggplot(data = pirates, aes(x = factor(Limbs), y = Teeth)) +
geom_boxplot(color="blue", fill="green", alpha=0.2) +
facet_wrap(ShipID ~ Origin)
ships <- read.csv("/Users/bamflappy/Repos/rPlayground/data/PiratesShip.csv")
summary(ships)
mean(ships$CrewCapacity)
sum(ships$CrewCapacity)
swetwd
setwd
?setwd
#Load the edgeR library
library("edgeR")
?heatmap
# set the working directory
#setwd("/YOUR/FILE/PATH/")
setwd("/Users/bamflappy/Repos/rPlayground/")
# install libraries, if necessary
#https://github.com/ewenme/ghibli
#BiocManager::install("edgeR")
#install.packages("statmod")
#install.packages("ghibli")
# import libraries
library(edgeR)
library(ggplot2)
library(ghibli)
# import gene count data
tribolium_counts <- read.csv("data/TriboliumCounts.csv", row.names="X")
# trim the data table
#countsTable <- head(inputTable, - 5)
# import grouping factor
targets <- read.csv(file="data/groupingFactors.csv")
# view available palettes
par(mfrow=c(9,3))
for(i in names(ghibli_palettes)) print(ghibli_palette(i))
dev.off()
# retrieve the vector of colors associated with Zissou1
#Error in check_for_XQuartz() :
#  X11 library is missing: install XQuartz from www.xquartz.org
#brew install --cask xquartz
(ghibli_colors <- ghibli_palette("PonyoMedium", type = "discrete"))
ghibli_subset <- c(ghibli_colors[3], ghibli_colors[6], ghibli_colors[4])
##
# Prep Stage
##
#Setup a design matrix
group <- factor(paste(targets$treatment,targets$hours,sep="."))
#cbind(targets,Group=group)
#Create DGE list object
list <- DGEList(counts=tribolium_counts,group=group)
colnames(list) <- rownames(targets)
head(list)
#Plot the library sizes before normalization
jpeg("plots/dev/glm_librarySizes.jpg")
barplot(list$samples$lib.size*1e-6, names=1:12, ylab="Library size (millions)")
dev.off()
#Retain genes only if it is expressed at a minimum level
keep <- filterByExpr(list)
summary(keep)
list <- list[keep, , keep.lib.sizes=FALSE]
#Use TMM normalization to eliminate composition biases
# between libraries
list <- calcNormFactors(list)
#Retrieve normalized counts
normList <- cpm(list, normalized.lib.sizes=TRUE)
#Write the normalized counts to a file
write.table(normList, file="data/tribolium_normalizedCounts.csv", sep=",", row.names=TRUE)
#View normalization factors
list$samples
dim(list)
#Verify TMM normalization using a MD plot
# and write the plot to jpg file
jpeg("plots/dev/glm_MD_afterNorm.jpg")
plotMD(cpm(list, log=TRUE), column=1)
abline(h=0, col="red", lty=2, lwd=2)
dev.off()
#Use a MDS plot to visualizes the differences
# between the expression profiles of different samples
points <- c(0,1,2,3,15,16,17,18)
colors <- rep(c(ghibli_colors[3], ghibli_colors[6], ghibli_colors[4], ghibli_colors[1]), 2)
#Write plot without legend to file
jpeg("plots/dev/glm_MDS_withoutLegend.jpg")
plotMDS(list, col=colors[group], pch=points[group])
dev.off()
#Write plot with legend to file
jpeg("plots/dev/glm_MDS_withLegend.jpg")
plotMDS(list, col=colors[group], pch=points[group])
legend("topleft", legend=levels(group), pch=points, col=colors, ncol=2)
dev.off()
#The experimental design is parametrized with a one-way layout,
# where one coefficient is assigned to each group
design <- model.matrix(~ 0 + group)
colnames(design) <- levels(group)
#design
#Next, the NB dispersion is estimated
list <- estimateDisp(list, design, robust=TRUE)
#list$common.dispersion
#Visualize the dispersion estimates with a BCV plot
#Write plot to file
jpeg("glm_BCV.jpg")
plotBCV(list)
dev.off()
#Now, estimate and plot the QL dispersions
fit <- glmQLFit(list, design, robust=TRUE)
#head(fit$coefficients)
#Write plot to file
jpeg("glm_QLDisp.jpg")
plotQLDisp(fit)
dev.off()
##
# DE Stage
##
##
#Test whether the average across all cntrl groups is equal to the average across
#all treat groups, to examine the overall effect of treatment
con.treat_cntrl <- makeContrasts(set.treat_cntrl = (treat.4h + treat.24h)/2
- (cntrl.4h + cntrl.24h)/2,
levels=design)
#Look at genes with significant expression across all UV groups
anov.treat_cntrl <- glmTreat(fit, contrast=con.treat_cntrl, lfc=log2(1.2))
summary(decideTests(anov.treat_cntrl))
#Write MD plot to file
jpeg("plots/dev/glm_treat_cntrl_MD.jpg")
plotMD(anov.treat_cntrl)
abline(h=c(-1, 1), col="blue")
dev.off()
#Generate table of DE genes
tagsTbl_treat_cntrl <- topTags(anov.treat_cntrl, n=nrow(anov.treat_cntrl$table), adjust.method="fdr")$table
write.table(tagsTbl_treat_cntrl, file="data/glm_treat_cntrl.csv", sep=",", row.names=TRUE)
#Identify significantly DE genes
tagsTbl_treat_cntrl$topDE <- "NA"
tagsTbl_treat_cntrl$topDE[tagsTbl_treat_cntrl$logFC > 1 & tagsTbl_treat_cntrl$FDR < 0.05] <- "UP"
tagsTbl_treat_cntrl$topDE[tagsTbl_treat_cntrl$logFC < -1 & tagsTbl_treat_cntrl$FDR < 0.05] <- "DOWN"
#Create volcano plot
jpeg("plots/dev/glm_treat_cntrl_volcano.jpg")
ggplot(data=tagsTbl_treat_cntrl, aes(x=logFC, y=-log10(FDR), color = topDE)) +
geom_point() +
theme_minimal() +
scale_colour_discrete(type = ghibli_subset)
dev.off()
##
#Test whether the average across all tolerant groups is equal to the average across
#all not tolerant groups, to examine the overall effect of tolerance
con.24h_4h <- makeContrasts(set.24h_4h = (cntrl.24h + treat.24h)/2
- (cntrl.4h + treat.4h)/2,
levels=design)
#Look at genes with significant expression across all UV groups
anov.24h_4h <- glmTreat(fit, contrast=con.24h_4h, lfc=log2(1.2))
summary(decideTests(anov.24h_4h))
#Write plot to file
jpeg("plots/dev/glm_24h_4h_MD.jpg")
plotMD(anov.24h_4h)
abline(h=c(-1, 1), col="blue")
dev.off()
#Generate table of DE genes
tagsTbl_24h_4h <- topTags(anov.24h_4h, n=nrow(anov.24h_4h$table), adjust.method="fdr")$table
write.table(tagsTbl_24h_4h, file="data/glm_24h_4h.csv", sep=",", row.names=TRUE)
#Identify significantly DE genes
tagsTbl_24h_4h$topDE <- "NA"
tagsTbl_24h_4h$topDE[tagsTbl_24h_4h$logFC > 1 & tagsTbl_24h_4h$FDR < 0.05] <- "UP"
tagsTbl_24h_4h$topDE[tagsTbl_24h_4h$logFC < -1 & tagsTbl_24h_4h$FDR < 0.05] <- "DOWN"
#Create volcano plot
jpeg("plots/dev/glm_24h_4h_volcano.jpg")
ggplot(data=tagsTbl_24h_4h, aes(x=logFC, y=-log10(FDR), color = topDE)) +
geom_point() +
theme_minimal() +
scale_colour_discrete(type = ghibli_subset)
dev.off()
##
#Test whether there is an interaction effect
con.interaction <- makeContrasts(set.interaction = ((treat.4h + treat.24h)/2
- (cntrl.4h + cntrl.24h)/2)
- ((cntrl.24h + treat.24h)/2
- (cntrl.4h + treat.4h)/2),
levels=design)
#Look at genes with significant expression
anov.interaction <- glmTreat(fit, contrast=con.interaction, lfc=log2(1.2))
summary(decideTests(anov.interaction))
#Write plot to file
jpeg("plots/dev/glm_interaction_MD.jpg")
plotMD(anov.interaction)
abline(h=c(-1, 1), col="blue")
dev.off()
#Generate table of DE genes
tagsTbl_inter <- topTags(anov.interaction, n=nrow(anov.interaction$table), adjust.method="fdr")$table
write.table(tagsTbl_inter, file="data/glm_interaction.csv", sep=",", row.names=TRUE)
#Identify significantly DE genes
tagsTbl_inter$topDE <- "NA"
tagsTbl_inter$topDE[tagsTbl_inter$logFC > 1 & tagsTbl_inter$FDR < 0.05] <- "UP"
tagsTbl_inter$topDE[tagsTbl_inter$logFC < -1 & tagsTbl_inter$FDR < 0.05] <- "DOWN"
#Create volcano plot
jpeg("plots/dev/glm_interaction_volcano.jpg")
ggplot(data=tagsTbl_inter, aes(x=logFC, y=-log10(FDR), color = topDE)) +
geom_point() +
theme_minimal() +
scale_colour_discrete(type = ghibli_subset)
dev.off()
# set the working directory
#setwd("/YOUR/FILE/PATH/")
setwd("/Users/bamflappy/Repos/rPlayground/")
# install libraries, if necessary
#https://github.com/ewenme/ghibli
#BiocManager::install("edgeR")
#install.packages("statmod")
#install.packages("ghibli")
# import libraries
library(edgeR)
library(ggplot2)
library(ghibli)
# import gene count data
tribolium_counts <- read.csv("data/TriboliumCounts.csv", row.names="X")
#Trim the data table
#countsTable <- head(inputTable, - 5)
# select a subset of the gene count data
#tribolium_counts[ , 1:6]
#Add grouping factor
group <- factor(c(rep("cntrl_4h",3), rep("treat_4h",3), rep("cntrl_24h",3), rep("treat_24h",3)))
# view available palettes
par(mfrow=c(9,3))
for(i in names(ghibli_palettes)) print(ghibli_palette(i))
dev.off()
# retrieve the vector of colors associated with Zissou1
#Error in check_for_XQuartz() :
#  X11 library is missing: install XQuartz from www.xquartz.org
#brew install --cask xquartz
(ghibli_colors <- ghibli_palette("PonyoMedium", type = "discrete"))
ghibli_subset <- c(ghibli_colors[3], ghibli_colors[6], ghibli_colors[4])
##
# Prep Stage
##
#Create DGE list object
list <- DGEList(counts=tribolium_counts,group=group)
#Plot the library sizes before normalization and write to a jpg file
jpeg("plots/dev/exactTest_librarySizes.jpg")
barplot(list$samples$lib.size*1e-6, names=1:12, ylab="Library size (millions)")
dev.off()
#There is no purpose in analyzing genes that are not expressed in either
# experimental condition, so genes are first filtered on expression levels
keep <- filterByExpr(list)
table(keep)
list <- list[keep, , keep.lib.sizes=FALSE]
#Calculate normalized factors
list <- calcNormFactors(list)
normList <- cpm(list, normalized.lib.sizes=TRUE)
#Write the normalized counts to a file
write.table(normList, file="data/tribolium_normalizedCounts.csv", sep=",", row.names=TRUE)
#View normalization factors
list$samples
dim(list)
#Use a MDS plot to visualizes the differences
# between the expression profiles of different samples
points <- c(0,1,2,3,15,16,17,18)
colors <- rep(c(ghibli_colors[3], ghibli_colors[6], ghibli_colors[4], ghibli_colors[1]), 2)
#Write plot without legend to file
jpeg("plots/dev/exactTest_MDS_withoutLegend.jpg")
plotMDS(list, col=colors[group], pch=points[group])
dev.off()
#Write plot with legend to file
jpeg("plots/dev/exactTest_MDS_withLegend.jpg")
plotMDS(list, col=colors[group], pch=points[group])
legend("topleft", legend=levels(group), pch=points, col=colors, ncol=2)
dev.off()
#Calculate the log CPM of the gene count data
logcpm <- cpm(list, log=TRUE)
#Draw a heatmap of individual RNA-seq samples using moderated
# log-counts-per-million after normalization
jpeg("plots/dev/exactTest_logCPM.jpg")
heatmap(logcpm)
dev.off()
#Produce a matrix of pseudo-counts
#Estimate common dispersion and tagwise dispersions
list <- estimateDisp(list)
list$common.dispersion
#View dispersion estimates and biological coefficient of variation
jpeg("plots/dev/exactTest_BCV.jpg")
plotBCV(list)
dev.off()
##
# DE Stage
##
##
#Perform an exact test for treat_4h vs ctrl_4h
tested_4h <- exactTest(list, pair=c("cntrl_4h", "treat_4h"))
#Create results table of DE genes
resultsTbl_4h <- topTags(tested_4h, n=nrow(tested_4h$table))$table
#Create a table of DE genes filtered by FDR
resultsTbl_4h.keep <- resultsTbl_4h$FDR <= 0.05
resultsTbl_4h_filtered <- resultsTbl_4h[resultsTbl_4h.keep,]
#Write the results of the exact tests to a csv file
write.table(resultsTbl_4h_filtered, file="data/exactTest_4h_filtered.csv", sep=",", row.names=TRUE)
#Look at the counts-per-million in individual samples for the top genes
o <- order(tested_4h$table$PValue)
cpm(list)[o[1:10],]
#View the total number of differentially expressed genes at a p-value of 0.05
summary(decideTests(tested_4h))
#Plot log-fold change against log-counts per million, with DE genes highlighted
#The blue lines indicate 2-fold changes
jpeg("plots/dev/exactTest_4h_DE.jpg")
plotMD(tested_4h)
abline(h=c(-1, 1), col="blue")
dev.off()
#Make a mean-difference plot of two libraries of count data with smearing of points
#  with very low counts, especially those that are zero for one of the columns
jpeg("plots/dev/exactTest_4h_smear.jpg")
plotSmear(tested_4h)
dev.off()
#Identify significantly DE genes
resultsTbl_4h$topDE <- "NA"
resultsTbl_4h$topDE[resultsTbl_4h$logFC > 1 & resultsTbl_4h$FDR < 0.05] <- "UP"
resultsTbl_4h$topDE[resultsTbl_4h$logFC < -1 & resultsTbl_4h$FDR < 0.05] <- "DOWN"
#Create volcano plot
jpeg("plots/dev/exactTest_4h_volcano.jpg")
ggplot(data=resultsTbl_4h, aes(x=logFC, y=-log10(FDR), color = topDE)) +
geom_point() +
theme_minimal() +
scale_colour_discrete(type = ghibli_subset)
dev.off()
##
#Perform an exact test for treat_24h vs ctrl_24h
tested_24h <- exactTest(list, pair=c("cntrl_24h", "treat_24h"))
#Create a table of DE genes filtered by FDR
resultsTbl_24h <- topTags(tested_24h, n=nrow(tested_24h$table))$table
#Create filtered results table of DE genes
resultsTbl_24h.keep <- resultsTbl_24h$FDR <= 0.05
resultsTbl_24h_filtered <- resultsTbl_24h[resultsTbl_24h.keep,]
#Write the results of the exact tests to a csv file
write.table(resultsTbl_24h_filtered, file="data/exactTest_24h_filtered.csv", sep=",", row.names=TRUE)
#Look at the counts-per-million in individual samples for the top genes
o <- order(tested_24h$table$PValue)
cpm(list)[o[1:10],]
#View the total number of differentially expressed genes at a p-value of 0.05
summary(decideTests(tested_24h))
#Plot log-fold change against log-counts per million, with DE genes highlighted
#The blue lines indicate 2-fold changes
jpeg("plots/dev/exactTest_24h_DE.jpg")
plotMD(tested_24h)
abline(h=c(-1, 1), col="blue")
dev.off()
#Make a mean-difference plot of two libraries of count data with smearing of points
#  with very low counts, especially those that are zero for one of the columns
jpeg("plots/dev/exactTest_24h_smear.jpg")
plotSmear(tested_24h)
dev.off()
#Identify significantly DE genes
resultsTbl_24h$topDE <- "NA"
resultsTbl_24h$topDE[resultsTbl_24h$logFC > 1 & resultsTbl_24h$FDR < 0.05] <- "UP"
resultsTbl_24h$topDE[resultsTbl_24h$logFC < -1 & resultsTbl_24h$FDR < 0.05] <- "DOWN"
#Create volcano plot
jpeg("plots/dev/exactTest_24h_volcano.jpg")
ggplot(data=resultsTbl_24h, aes(x=logFC, y=-log10(FDR), color = topDE)) +
geom_point() +
theme_minimal() +
scale_colour_discrete(type = ghibli_subset)
dev.off()
##
#Perform an exact test for treat_4h vs treat_24h
tested_treat <- exactTest(list, pair=c("treat_24h", "treat_4h"))
#Create a table of DE genes filtered by FDR
resultsTbl_treat <- topTags(tested_treat, n=nrow(tested_treat$table))$table
#Create filtered results table of DE genes
resultsTbl_treat.keep <- resultsTbl_treat$FDR <= 0.05
resultsTbl_treat_filtered <- resultsTbl_treat[resultsTbl_treat.keep,]
#Write the results of the exact tests to a csv file
write.table(resultsTbl_treat_filtered, file="data/exactTest_treat_filtered.csv", sep=",", row.names=TRUE)
#Look at the counts-per-million in individual samples for the top genes
o <- order(tested_treat$table$PValue)
cpm(list)[o[1:10],]
#View the total number of differentially expressed genes at a p-value of 0.05
summary(decideTests(tested_treat))
#Plot log-fold change against log-counts per million, with DE genes highlighted
#The blue lines indicate 2-fold changes
jpeg("plots/dev/exactTest_treat_DE.jpg")
plotMD(tested_treat)
abline(h=c(-1, 1), col="blue")
dev.off()
#Make a mean-difference plot of two libraries of count data with smearing of points
#  with very low counts, especially those that are zero for one of the columns
jpeg("plots/dev/exactTest_treat_smear.jpg")
plotSmear(tested_treat)
dev.off()
#Identify significantly DE genes
resultsTbl_treat$topDE <- "NA"
resultsTbl_treat$topDE[resultsTbl_treat$logFC > 1 & resultsTbl_treat$FDR < 0.05] <- "UP"
resultsTbl_treat$topDE[resultsTbl_treat$logFC < -1 & resultsTbl_treat$FDR < 0.05] <- "DOWN"
#Create volcano plot
jpeg("plots/dev/exactTest_treat_volcano.jpg")
ggplot(data=resultsTbl_treat, aes(x=logFC, y=-log10(FDR), color = topDE)) +
geom_point() +
theme_minimal() +
scale_colour_discrete(type = ghibli_subset)
dev.off()
##############
#Perform an exact test for cntrl_4h vs ctrl_24h
tested_cntrl <- exactTest(list, pair=c("cntrl_24h", "cntrl_4h"))
#Create a table of DE genes filtered by FDR
resultsTbl_nctrl <- topTags(tested_cntrl, n=nrow(tested_cntrl$table))$table
#Create filtered results table of DE genes
resultsTbl_ctrl.keep <- resultsTbl_nctrl$FDR <= 0.05
resultsTbl_cntrl_filtered <- resultsTbl_nctrl[resultsTbl_ctrl.keep,]
#Write the results of the exact tests to a csv file
write.table(resultsTbl_cntrl_filtered, file="data/exactTest_cntrl_filtered.csv", sep=",", row.names=TRUE)
#Look at the counts-per-million in individual samples for the top genes
o <- order(tested_cntrl$table$PValue)
cpm(list)[o[1:10],]
#View the total number of differentially expressed genes at a p-value of 0.05
summary(decideTests(tested_cntrl))
#Plot log-fold change against log-counts per million, with DE genes highlighted
#The blue lines indicate 2-fold changes
jpeg("plots/dev/exactTest_cntrl_DE.jpg")
plotMD(tested_cntrl)
abline(h=c(-1, 1), col="blue")
dev.off()
#Make a mean-difference plot of two libraries of count data with smearing of points
#  with very low counts, especially those that are zero for one of the columns
jpeg("plots/dev/exactTest_cntrl_smear.jpg")
plotSmear(tested_cntrl)
dev.off()
#Identify significantly DE genes
resultsTbl_nctrl$topDE <- "NA"
resultsTbl_nctrl$topDE[resultsTbl_nctrl$logFC > 1 & resultsTbl_nctrl$FDR < 0.05] <- "UP"
resultsTbl_nctrl$topDE[resultsTbl_nctrl$logFC < -1 & resultsTbl_nctrl$FDR < 0.05] <- "DOWN"
#Create volcano plot
jpeg("plots/dev/exactTest_cntrl_volcano.jpg")
ggplot(data=resultsTbl_nctrl, aes(x=logFC, y=-log10(FDR), color = topDE)) +
geom_point() +
theme_minimal() +
scale_colour_discrete(type = ghibli_subset)
dev.off()
